from typing import Literal
from typing_extensions import deprecated

from pydantic import BaseModel, Field


class Descriptor(BaseModel, validate_assignment=True):
    desc: str
    label: str


class Gpid(BaseModel, validate_assignment=True):
    component: int
    pointId: list[str]


class MapsElement(BaseModel, validate_assignment=True):
    cType: Literal["Topology"] = "Topology"
    id: str = ""
    name: str = ""
    visible: bool = True
    x: float = 0.0
    y: float = 0.0


# Literal types
Type = Literal[
    "ipVertex",
    "codecVertex",
    "genericVertex",
    "baseDevice",
    "unidirectionalEdge",
    "nGraphResourceTransform",  # Note: Not implemented yet
    "ipTransformVertex",  # Note: Not implemented yet
    "routerVertex",  # Note: Not implemented yet
]


VertexType = Literal["Bidirectional", "In", "Internal", "Out", "Undecided"]

ConfigPriority = Literal["high", "low", "off"]

Control = Literal["full", "off", "semi"]

SipsMode = Literal["NONE", "SIPSAuto", "SIPSDuplicate", "SIPSMerge", "SIPSSplit"]


# Literal types baseDevice
IconSize = Literal["auto", "large", "medium", "small"]


IconType = Literal[
    "default",
    "none",
    "device",
    "camera",
    "monitor",
    "encoder",
    "decoder",
    "audioMixer",
    "videoMixer",
    "processingDevice",
    "transportStreamProcessor",
    "mediaDevice",
    "server",
    "gateway",
    "ipSwitchRouter",
    "vlanCloud",
    "videoAudioRouterMatrix",
    "encoderDecoder",
]

SdpStrategy = Literal[
    "always",  # Continuous
    "once",  # Fetch and Confirm
    "video",  # Continuous Video, Confirm Others
]


class NGraphElement(BaseModel, validate_assignment=True):
    """Base class for all nGraphElements"""

    id: str = Field(..., alias="_id")
    rev: None | str = Field(..., alias="_rev")
    vid: str = Field(..., alias="_vid")
    descriptor: Descriptor
    fDescriptor: Descriptor
    tags: list[str] = []
    type: Type

    @property
    def label(self) -> str:
        return self.descriptor.label

    @label.setter
    def label(self, value: str):
        self.descriptor.label = value

    @property
    def description(self) -> str:
        return self.descriptor.desc

    @description.setter
    def description(self, value: str):
        self.descriptor.desc = value

    @property
    def factory_label(self) -> str:
        return self.fDescriptor.label

    @property
    def factory_description(self) -> str:
        return self.fDescriptor.desc

    def action(self, action: Literal["add", "replace", "remove"]) -> dict:
        """Method to create an API action for the nGraphElement.

        Args:
            action (Literal[&quot;add&quot;, &quot;replace&quot;, &quot;remove&quot;])

        Returns:
            dict: Body of the API Request
        """
        if action == "add":
            rev = None
        else:
            rev = self.rev
        body = {"action": action, "clientId": "topologyManagerSpec", "key": self.id, "rev": rev, "skey": self.id}
        if action != "remove":
            body["value"] = self.model_dump(mode="json", exclude={"id", "rev", "vid"}, by_alias=True)
        return body

    # Deprecated methods
    @deprecated(
        "The methods `create_action` and `remove_action ` are deprecated, use `action` instead.",
        category=None,
    )
    def create_action(self, action: Literal["add", "replace"]) -> dict:
        rev = self.rev
        if action == "add":
            rev = None  # Add action does not need a rev -> generated by the server
        return {
            "action": action,
            "clientId": "topologyManagerSpec",
            "key": self.vid,
            "rev": rev,
            "skey": self.vid,
            "value": self.model_dump(mode="json", exclude={"id", "rev", "vid"}, by_alias=True),
        }

    @deprecated(
        "The methods `create_action` and `remove_action ` are deprecated, use `action` instead.",
        category=None,
    )
    def remove_action(self) -> dict:
        return {
            "action": "remove",
            "clientId": "topologyManagerSpec",
            "key": self.vid,
            "rev": self.rev,
            "skey": self.vid,
        }
