name: Test, Build and Release Python Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  # üü¢ 1Ô∏è‚É£ Test Job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  # üîµ 2Ô∏è‚É£ Build Job (Runs in Parallel with Tests)
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.get_version.outputs.version }}  # Store the version as an output variable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Build package
        run: poetry build

      - name: Extract package version
        id: get_version  # Store version output
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with: 
          name: videoipath-automation-tool-${{ steps.get_version.outputs.version }}
          path: dist/*

  # üî¥ 3Ô∏è‚É£ Release Job (Uses Prebuilt Package)
  release:
    runs-on: ubuntu-latest
    needs: build
    env:
      VERSION: ${{ needs.build.outputs.version }}  # Retrieve the version from build job output
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: videoipath-automation-tool-${{ env.VERSION }}
          path: dist/

      - name: Create or update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ env.VERSION }}" 

          # Check if tag exists
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Deleting old tag and release for $TAG"
            gh release delete "$TAG" --yes || true
            git push --delete origin "$TAG" || true
          fi

          # Create new tag from the latest commit
          git tag "$TAG"
          git push origin "$TAG"

          # Create new release with the built package
          gh release create "$TAG" dist/* \
            --title "Release $TAG" \
            --notes "Automated release for version $TAG" \
            --latest
