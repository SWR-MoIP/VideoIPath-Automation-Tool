name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  # 🟢 1️⃣ Test Job
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest

  # 🔵 2️⃣ Build Job (Runs in Parallel with Tests)
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.get_version.outputs.version }} # Store the version as an output variable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Build package
        run: poetry build

      - name: Extract package version
        id: get_version # Store version output
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: videoipath-automation-tool-${{ steps.get_version.outputs.version }}
          path: dist/*

  # 🔴 3️⃣ Release Job (Uses Prebuilt Package)
  release:
    name: Release / Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    env:
      VERSION: ${{ needs.build.outputs.version }}
      PYPI_USERNAME: "__token__"
      PYPI_PASSWORD: "${{ secrets.PYPI_API_TOKEN }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry and Set Version
        run: |
          git fetch --tags

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=$(poetry version --short)
            echo "Stable version for release: $VERSION"
          elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="$(poetry version --short).dev+$SHORT_SHA"
            echo "Development version (main): $VERSION"
            poetry version "$VERSION"
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            VERSION="$(poetry version --short).dev+$SHORT_SHA"
            echo "Development version (branch): $VERSION"
            poetry version "$VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build the package
        run: poetry build

      - name: Publish to PyPI
        run: |
          poetry config pypi-token.pypi "${PYPI_API_TOKEN}"
          poetry publish --build
